{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"firewallName": {
			"type": "string",
			"metadata": {
				"description": "The name of the firewall to deploy.  This name will have a number appended to it.  For example, if the parameter is 'AcmeFW' and 3 firewalls are deployed, the three firewalls will have the names 'AcmeFW0', 'AcmeFW1', and 'AcmeFW2'."
			},
			"defaultValue": "PaloAlto"
		},
		"numberOfFirewalls": {
			"type": "int",
			"defaultValue": 2,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5
			]
			"metadata": {
				"description": "Select the number of VM-Series firewalls to deploy.  Minimum is 1, maximum is 5."
			}
		},
		"virtualMachineSize": {
			"type": "string",
			"defaultValue": "Standard_D3_v2",
			"allowedValues": [
				"Standard_D3",
				"Standard_D4",
				"Standard_D3_v2",
				"Standard_D4_v2",
				"Standard_A4",
				"Standard_DS3_v2",
				"Standard_DS4_v2"
			]
		},
		"imageSku": {
			"type": "string",
			"defaultValue": "byol",
			"metadata": {
				"description": "Select BYOL, PAYG-Bundle1, or PAYG-Bundle2 (more info: https://azuremarketplace.microsoft.com/en-us/marketplace/apps/paloaltonetworks.vmseries-ngfw?tab=PlansAndPrice)"
			},
			"allowedValues": [
				"byol",
				"bundle1",
				"bundle2"
			]
		},
		"imageVersion": {
			"type": "string",
			"defaultValue": "latest",
			"allowedValues": [
				"latest",
				"8.0.0",
				"7.1.1"
			],
			"metadata": {
				"description": "Select the PAN-OS version to run."
			}
		},
		"adminUsername": {
			"type": "string",
			"metadata": {
				"description": "Enter username for the firewall's administrator account."
			}
		},
		"adminPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Enter password for the firewall's administrator account."
			}
		},
		"storageAccountType": {
			"type": "string",
			"defaultValue": "Unmanaged-Storage-Account",
			"allowedValues": [
				"New Unmanaged Storage Account",
				"Existing Unmanaged Storage Account",
				"Managed Storage"
			],
			"metadata": {
				"Description": "Sets the type of storage account to use for the OS disk(s) of the firewall(s).  'New Unmanaged Storage Account' creates a new storage account in the defined resource group.  'Existing Unmanaged Storage Account' uses an existing storage account in the defined resource group.  'Managed Storage' uses Azure's managed disks."
			}
		},
		"storageAccountResourceGroup": {
			"type": "string",
			"metadata": {
				"description": "Applies only to new/existing unmanaged storage.  If creating a 'New Unmanaged Storage Account', enter the resource group of where you want to deploy the new storage account.  If using an 'Existing Unmanaged Storage Account', enter the name of the resource group that contains it."
			}
		},
		"storageAccountName": {
			"type": "string",
			"metadata": {
				"description": "Applies only to unmanaged storage. If creating a 'New Unmanaged Storage Account', this will be the name of the new storage account.  If using an 'Existing Unmanaged Storage Account', enter the name of the existing storage account."
			}
		},
		"osDiskStorageType": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"allowedValues": [
				"Standard_LRS",
				"Premium_LRS"
			],
			"metadata": {
				"description": "Sets the storage type for OS disk of the firewall(s)."
			}
		},
		"newOrExistingAvailabilitySet": {
			"type": "string",
			"allowedValues": [
				"Create a new availability set",
				"Add firewall(s) to existing availability set"
			],
			"metadata": {
				"description": "Select 'Create a new availability set' to create a new availability set for the firewall(s).  Select 'Add firewall(s) to existing availability set' to add the firewalls to an existing availability set."
			}
		},
		"availabilitySetName": {
			"type": "string",
			"defaultValue": "Firewall-AV-Set",
			"metadata": {
				"description": "Enter the name of the availability set to deploy the firewall(s).  If creating a new availability set, enter the name of the new availability set.  If using an existing availability set, enter the name of the existing availability set."
			}
		},
		"availabilitySetUpdateDomainCount": {
			"type": "int",
			"defaultValue": 5,
			"metadata": {
				"description": "Applies only to a new availability set.  This value sets the update domain count for the new availability set.  Default value: 5"
			}
		},
		"availabilitySetFaultDomainCount": {
			"type": "int",
			"defaultValue": 3,
			"metadata": {
				"description": "Applies only to a new availability set.  This value sets the fault domain count for the new availability set. Default value: 3"
			}
		},
		"virtualNetworkName": {
			"type": "string",
			"metadata": {
				"description": "Enter the name of the existing virtual network.  This virtual network is where the firewall(s) will be deployed."
			}
		},
		"virtualNetworkResourceGroup": {
			"type": "string",
			"metadata": {
				"description": "Enter the resource group of the existing virtual network."
			}
		},
		"mgmtSubnetName": {
			"type": "string",
			"metadata": {
				"description": "Enter the name of the existing subnet where the firewall's management interface will reside"
			}
		},
		"untrustSubnetName": {
			"type": "string",
			"metadata": {
				"description": "Enter the name of the existing subnet where the firewall's untrust interface will reside."
			}
		},
		"trustSubnetName": {
			"type": "string",
			"metadata": {
				"description": "Enter the name of the existing subnet where the firewall's trust interface will reside."
			}
		},
		"mgmtNicName": {
			"type": "string",
			"defaultValue": "mgmt-nic",
			"metadata": {
				"description": "Sets the name for the firewall(s) private management NIC(s). The name of the firewall(s) will be appended to this parameter.  For example, if the parameter entry is 'mgmt-nic' the final NIC name will be 'mgmt-nic'[-Firewall Name#]"
			}
		},
		"untrustNicName": {
			"type": "string",
			"defaultValue": "untrust-nic",
			"metadata": {
				"description": "Sets the name for the firewall(s) private untrust NIC(s). The name of the firewall(s) will be appended to this parameter.  For example, if the parameter entry is 'untrust-nic' the final NIC name will be 'untrust-nic'[-Firewall Name#]"
			}
		},
		"trustNicName": {
			"type": "string",
			"defaultValue": "trust-nic",
			"metadata": {
				"description": "Sets the name for the firewall(s) private trust NIC(s). The name of the firewall(s) will be appended to this parameter.  For example, if the parameter entry is 'trust-nic' the final NIC name will be 'trust-nic'[-Firewall Name#]"
			}
		},
		"applyPublicIpToMgmtNic": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"metadata": {
				"description": "Select Yes to add a public IP to the firewall(s) management NICs."
			}
		},
		"mgmtPublicNicName": {
			"type": "string",
			"defaultValue": "mgmt-pip",
			"metadata": {
				"description": "Applies only if adding public IP to the management NIC(s).  This value sets public IP name for the management NIC(s) of the firewall(s).  The name of the firewall(s) will be appended to this parameter.  For example, if the parameter entry is 'mgmt-public-ip', the final NIC name will be 'mgmt-public-ip'[-Firewall Name#]"
			}
		},
		"createNewInternalLB": {
			"type": "string",
			"allowedValues": [
				"Create new internal load balancer",
				"Use existing internal load balancer",
				"Do not use load balancer"
			],
			"metadata": {
				"description": "'Create new internal load balancer' creates a new internal standard load balancer and applies the trust NIC(s) as the backend pool.  'Use existing internal load balancer' uses an existing internal load balancer and applies the trust NIC(s) as the backend pool.  'Do not use load balancer' will omit applying the trust NIC(s) to a load balancer."
			}
		},
		"internalLBName": {
			"type": "string",
			"defaultValue": "Internal-Standard-LB",
			"metadata": {
				"description": "If 'Create new internal load balancer' is selected, enter the name of the new internal standard load balancer.  If 'Use existing internal load balancer' is selected, enter the name of the existing internal load balancer."
			}
		},
		"internalLBFrontendName": {
			"type": "string",
			"defaultValue": "Internal-LB-Frontend",
			"metadata": {
				"description": "Applies only if creating a new internal load balancer. This parameter sets the new internal load balancer's front end name."
			}
		},
		"internalLBSubnetName": {
			"type": "string",
			"metadata": {
				"description": "Applies only if creating a new internal load balancer.  This parameter must be the name of an existing subnet and this subnet's CIDR can hold the Internal LB Frontend IP."
			}
		},
		"internalLBFrontendIP": {
			"type": "string",
			"metadata": {
				"description": "Applies only if creating a new internal load balancer.  This parameter is the internal load balancer's frontend IP address."
			}
		},
		"internalLBBackendPoolName": {
			"type": "string",
			"defaultValue": "Firewall-Trust-Pool",
			"metadata": {
				"description": "Applies only if creating a new internal load balancer.  This parameter sets the name of the new internal load balancer's backend pool."
			}
		},
		"internalLBHealthProbeName": {
			"type": "string",
			"defaultValue": "Internal-LB-Health-Probe-22",
			"metadata": {
				"description": "Applies only if creating a new internal load balancer.  This parameter sets the name of the health probe."
			}
		},
		"internalLBHealthProbePort": {
			"type": "int",
			"defaultValue": 80,
			"metadata": {
				"description": "Applies only if creating a new internal load balancer.  This is the port the health probe will use to monitor the health of the firewall(s).  Default: 80"
			}
		},
		"internalLBRuleName": {
			"type": "string",
			"defaultValue": "HA-Ports",
			"metadata": {
				"description": "Applies only if creating a new internal load balancer.  This parameter sets the internal load balancer's Load Balancing rule name.  This rule leverages HA ports."
			}
		},
		"createNewPublicLB": {
			"type": "string",
			"allowedValues": [
				"Create new public load balancer",
				"Use existing public load balancer",
				"Do not use load balancer"
			],
			"metadata": {
				"description": "'Create new public load balancer' creates a new internal standard load balancer and applies the trust NIC(s) as the backend pool.  'Use existing public load balancer' uses an existing internal load balancer and applies the trust NIC(s) as the backend pool.  'Do not use load balancer' will omit applying the trust NIC(s) to a load balancer."
			}
		},
		"publicLBName": {
			"type": "string",
			"defaultValue": "Public-LB",
			"metadata": {
				"description": " If 'Create new public load balancer' is selected, enter the name of the new internal load balancer.  If 'Use existing public load balancer' is selected, enter the name of the existing internal load balancer."
			}
		},
		"publicLBFrontendName": {
			"type": "string",
			"defaultValue": "Public-LB-Frontend",
			"metadata": {
				"description": "Applies only if creating a new public load balancer.  This parameter sets the frontend name for the new public load balancer."
			}
		},
		"publicLBPublicIpName": {
			"type": "string",
			"defaultValue": "Public-LB-PIP",
			"metadata": {
				"description": "Applies only if creating a new public load balancer.  This parameter sets the name of the public IP address associated with the new public load balancer."
			}
		},
		"publicLBBackendPoolName": {
			"type": "string",
			"defaultValue": "Firewall-Untrust-Pool",
			"metadata": {
				"description": "Applies only if creating a new public load balancer.  This parameter sets the name of the new public load balancer's backend pool."
			}
		},
		"publicLBHealthProbeName": {
			"type": "string",
			"defaultValue": "Public-LB-Health-Probe-TCP-22",
			"metadata": {
				"description": "Applies only if creating a new public load balancer.  This parameter sets the health probe's name for the new public load balancer."
			}
		},
		"publicLBHealthProbePort": {
			"type": "int",
			"defaultValue": 22,
			"metadata": {
				"description": "Applies only if creating a new public load balancer.  This parameter sets the port the health probe will use to monitor the health of the firewall(s) untrust NICs."
			}
		},
		"publicLBRuleName": {
			"type": "string",
			"defaultValue": "Allow-TCP-22",
			"metadata": {
				"description": "Applies only if creating a new public load balancer.  This parameter sets the new public load balancer's first load balancing rule."
			}
		},
		"publicLBRuleFrontendPort": {
			"type": "int",
			"defaultValue": 22,
			"metadata": {
				"description": "Applies only if creating a new public load balancer.  This parameter sets the load balancing rule's frontend port. "
			}
		},
		"publicLBRuleBackendPort": {
			"type": "int",
			"defaultValue": 22,
			"metadata": {
				"description": "Applies only if creating a new public load balancer.  This parameter sets the load balancing rule's backend port. "
			}
		}
	},
	"variables": {
		"vnetId": "[resourceId(parameters('virtualNetworkResourceGroup'),concat('Microsoft.Network','/','virtualNetworks'),parameters('virtualNetworkName'))]",
		"mgmtSubnetRef": "[concat(variables('vnetId'),'/subnets/',parameters('mgmtSubnetName'))]",
		"untrustSubnetRef": "[concat(variables('vnetId'),'/subnets/',parameters('untrustSubnetName'))]",
		"trustSubnetRef": "[concat(variables('vnetId'),'/subnets/',parameters('trustSubnetName'))]",
		"mgmtPublicNicNameRef": "[concat(parameters('mgmtPublicNicName'),'-',parameters('firewallName'))]",
		"mgmtNicNameRef": "[concat(parameters('mgmtNicName'),'-',parameters('firewallName'))]",
		"untrustNicNameRef": "[concat(parameters('untrustNicName'),'-',parameters('firewallName'))]",
		"trustNicNameRef": "[concat(parameters('trustNicName'),'-',parameters('firewallName'))]",
		"imagePublisher": "paloaltonetworks",
		"imageOffer": "vmseries1",
		"storageAccountId": "[resourceId(parameters('storageAccountResourceGroup'),'Microsoft.Storage/StorageAccounts',parameters('storageAccountName'))]",
		"internalLBProbeProtocol": "TCP",
		"_artifactsLocationSasToken": "",
		"_artifactsLocation": "https://raw.githubusercontent.com/mattmclimans/PaloAltoNetworks/master/azure/nested/",
		"nicWithPIP_templateUri": "[concat(variables('_artifactsLocation'), 'nic-withPIP.json', variables('_artifactsLocationSasToken'))]",
		"nicWithLB_templateUri": "[concat(variables('_artifactsLocation'),'nic-withLB.json', variables('_artifactsLocationSasToken'))]",
		"nicWithoutLB_templateUri": "[concat(variables('_artifactsLocation'),'nic-withoutLB.json', variables('_artifactsLocationSasToken'))]",
		"managedPaloAlto_templateUri": "[concat(variables('_artifactsLocation'),'paloalto-managed.json', variables('_artifactsLocationSasToken'))]",
		"unmanagedPaloAlto_templateUri": "[concat(variables('_artifactsLocation'),'paloalto-unmanaged.json', variables('_artifactsLocationSasToken'))]"
	},
	"resources": [
		{
			"condition": "[equals(parameters('storageAccountType'), 'New Unmanaged Storage Account')]",
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[parameters('storageAccountName')]",
			"apiVersion": "2015-06-15",
			"location": "[resourceGroup().location]",
			"properties": {
				"accountType": "[parameters('osDiskStorageType')]"
			}
		}, 
		{
			"condition": "[equals(parameters('newOrExistingAvailabilitySet'), 'Create a new availability set')]",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "[parameters('availabilitySetName')]",
			"apiVersion": "2016-08-30",
			"location": "[resourceGroup().location]",
			"properties": {
				"platformFaultDomainCount": "[parameters('availabilitySetFaultDomainCount')]",
				"platformUpdateDomainCount": "[parameters('availabilitySetUpdateDomainCount')]"
			},
			"sku": {
				"name": "[if(equals(parameters('storageAccountType'), 'Managed Storage'), 'Aligned', 'Classic')]"
			}
		},
		{
			"condition": "[equals(parameters('createNewPublicLB'), 'Create new public load balancer')]",
			"type": "Microsoft.Network/loadBalancers",
			"name": "[parameters('publicLBName')]",
			"apiVersion": "2017-10-01",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[parameters('publicLBPublicIpName')]"
			],
			"sku": {
				"name": "Standard"
			},
			"properties": {
				"frontendIPConfigurations": [
					{
						"name": "[parameters('publicLBFrontendName')]",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicLBPublicIpName'))]"
							}
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "[parameters('publicLBBackendPoolName')]"
					}
				],
				"loadBalancingRules": [
					{
						"name": "[parameters('publicLBRuleName')]",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('publicLBName')), '/frontendIpConfigurations/', parameters('publicLBFrontendName'))]"
							},
							"frontendPort": "[parameters('publicLBRuleFrontendPort')]",
							"backendPort": "[parameters('publicLBRuleBackendPort')]",
							"enableFloatingIP": false,
							"idleTimeoutInMinutes": 4,
							"protocol": "Tcp",
							"loadDistribution": "Default",
							"disableOutboundSnat": false,
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('publicLBName')), '/backendAddressPools/', parameters('publicLBBackendPoolName'))]"
							},
							"probe": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('publicLBName')), '/probes/', parameters('publicLBHealthProbeName'))]"
							}
						}
					}
				],
				"probes": [
					{
						"name": "[parameters('publicLBHealthProbeName')]",
						"properties": {
							"protocol": "TCP",
							"port": "[parameters('publicLBHealthProbePort')]",
							"intervalInSeconds": 5,
							"numberOfProbes": 2
						}
					}
				],
				"inboundNatRules": [],
				"outboundNatRules": [],
				"inboundNatPools": []
			}
		},  
		{
			"condition": "[equals(parameters('createNewInternalLB'), 'Create new internal load balancer')]",
			"type": "Microsoft.Network/loadBalancers",
			"name": "[parameters('internalLBName')]",
			"apiVersion": "2017-10-01",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "Standard"
			},
			"properties": {
				"frontendIPConfigurations": [
					{
						"name": "[parameters('internalLBFrontendName')]",
						"properties": {
							"privateIPAddress": "[parameters('internalLBFrontendIP')]",
							"privateIPAllocationMethod": "Static",
							"subnet": {
								"id": "[concat(variables('vnetId'), '/subnets/', parameters('internalLBSubnetName'))]"
							}
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "[parameters('internalLBBackendPoolName')]"
					}
				],
				"loadBalancingRules": [
					{
						"name": "[parameters('internalLBRuleName')]",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLBName')), '/frontendIpConfigurations/', parameters('internalLBFrontendName'))]"
							},
							"frontendPort": 0,
							"backendPort": 0,
							"enableFloatingIP": true,
							"idleTimeoutInMinutes": 4,
							"protocol": "All",
							"loadDistribution": "Default",
							"disableOutboundSnat": false,
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLBName')), '/backendAddressPools/', parameters('internalLBBackendPoolName'))]"
							},
							"probe": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLBName')), '/probes/', parameters('internalLBHealthProbeName'))]"
							}
						}
					}
				],
				"probes": [
					{
						"name": "[parameters('internalLBHealthProbeName')]",
						"properties": {
							"protocol": "[variables('internalLBProbeProtocol')]",
							"port": "[parameters('internalLBHealthProbePort')]",
							"intervalInSeconds": 5,
							"numberOfProbes": 2
						}
					}
				],
				"inboundNatRules": [],
				"outboundNatRules": [],
				"inboundNatPools": []
			}
		}, 
		{
			"condition": "[equals(parameters('createNewPublicLB'), 'Create new public load balancer')]",
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[parameters('publicLBPublicIpName')]",
			"apiVersion": "2017-10-01",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "Standard"
			},
			"properties": {
				"publicIPAddressVersion": "IPv4",
				"publicIPAllocationMethod": "Static",
				"idleTimeoutInMinutes": 4
			},
			"dependsOn": []
		}, 
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('mgmtNicNameRef'),copyindex())]",
			"apiVersion": "2016-03-30",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "mgmtNicLoop",
				"count": "[parameters('numberOfFirewalls')]"
			},
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[variables('mgmtSubnetRef')]"
							}
						}
					}
				]
			}
		}, 
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('untrustNicNameRef'),copyindex())]",
			"apiVersion": "2016-03-30",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"mgmtNicLoop"
			],
			"copy": {
				"name": "untrustNicLoop",
				"count": "[parameters('numberOfFirewalls')]"
			},
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[variables('untrustSubnetRef')]"
							}
						}
					}
				]
			}
		}, 
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('trustNicNameRef'),copyindex())]",
			"apiVersion": "2016-03-30",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"untrustNicLoop"
			],
			"copy": {
				"name": "trustNicLoop",
				"count": "[parameters('numberOfFirewalls')]"
			},
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[variables('trustSubnetRef')]"
							}
						}
					}
				]
			}
		}, 
		{
			"type": "Microsoft.Resources/deployments",
			"name": "[concat('updateMgmtNic',copyindex())]",
			"apiVersion": "2017-08-01",
			"dependsOn": [
				"trustNicLoop"
			],
			"copy": {
				"name": "mgmtStaticNicLoop",
				"count": "[parameters('numberOfFirewalls')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[if(equals(parameters('applyPublicIpToMgmtNic'), 'Yes'), variables('nicWithPIP_templateUri'), variables('nicWithoutLB_templateUri'))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"nicName": {
						"value": "[concat(variables('mgmtNicNameRef'),copyindex())]"
					},
					"subnetRef": {
						"value": "[variables('mgmtSubnetRef')]"
					},
					"privateIp": {
						"value": "[reference(concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicNameRef'),copyindex())).ipConfigurations[0].properties.privateIPAddress]"
					},
					"publicIpName": {
						"value": "[concat(variables('mgmtPublicNicNameRef'),copyindex())]"
					},
					"lbName": {
						"value": "[parameters('publicLBName')]"
					},
					"lbBackendPoolName": {
						"value": "[parameters('publicLBBackendPoolName')]"
					}
				}
			}
		}, 
		{
			"type": "Microsoft.Resources/deployments",
			"name": "[concat('updateUntrustNic',copyindex())]",
			"apiVersion": "2017-08-01",
			"dependsOn": [
				"mgmtStaticNicLoop"
			],
			"copy": {
				"name": "untrustStaticNicLoop",
				"count": "[parameters('numberOfFirewalls')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[if(equals(parameters('createNewPublicLB'), 'Do not use load balancer'), variables('nicWithoutLB_templateUri'), variables('nicWithLB_templateUri'))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"nicName": {
						"value": "[concat(variables('untrustNicNameRef'),copyindex())]"
					},
					"subnetRef": {
						"value": "[variables('untrustSubnetRef')]"
					},
					"privateIp": {
						"value": "[reference(concat('Microsoft.Network/networkInterfaces/', variables('untrustNicNameRef'),copyindex())).ipConfigurations[0].properties.privateIPAddress]"
					},
					"publicIpName": {
						"value": "[concat(variables('mgmtPublicNicNameRef'),copyindex())]"
					},
					"lbName": {
						"value": "[parameters('publicLBName')]"
					},
					"lbBackendPoolName": {
						"value": "[parameters('publicLBBackendPoolName')]"
					}
				}
			}
		}, 
		{
			"type": "Microsoft.Resources/deployments",
			"name": "[concat('updateTrustNic',copyindex())]",
			"apiVersion": "2017-08-01",
			"dependsOn": [
				"untrustStaticNicLoop"
			],
			"copy": {
				"name": "trustStaticNicLoop",
				"count": "[parameters('numberOfFirewalls')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[if(equals(parameters('createNewInternalLB'), 'Do not use load balancer'), variables('nicWithoutLB_templateUri'), variables('nicWithLB_templateUri'))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"nicName": {
						"value": "[concat(variables('trustNicNameRef'),copyindex())]"
					},
					"subnetRef": {
						"value": "[variables('trustSubnetRef')]"
					},
					"privateIp": {
						"value": "[reference(concat('Microsoft.Network/networkInterfaces/', variables('trustNicNameRef'),copyindex())).ipConfigurations[0].properties.privateIPAddress]"
					},
					"publicIpName": {
						"value": "[concat(variables('mgmtPublicNicNameRef'),copyindex())]"
					},
					"lbName": {
						"value": "[parameters('internalLBName')]"
					},
					"lbBackendPoolName": {
						"value": "[parameters('internalLBBackendPoolName')]"
					}
				}
			}
		}, 
		{
			"name": "[concat('updateFirewall',copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2015-01-01",
			"dependsOn": [
				"trustStaticNicLoop"
			],
			"copy": {
				"name": "firewallLoop",
				"count": "[parameters('numberOfFirewalls')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[if(equals(parameters('storageAccountType'), 'Managed Storage'), variables('managedPaloAlto_templateUri'), variables('unmanagedPaloAlto_templateUri'))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[resourceGroup().location]"
					},
					"firewallName": {
						"value": "[concat(parameters('firewallName'),copyindex())]"
					},
					"imageSku": {
						"value": "[parameters('imageSku')]"
					},
					"imageOffer": {
						"value": "[variables('imageOffer')]"
					},
					"imageVersion": {
						"value": "[parameters('imageVersion')]"
					},
					"imagePublisher": {
						"value": "[variables('imagePublisher')]"
					},
					"mgmtNicName": {
						"value": "[concat(variables('mgmtNicNameRef'),copyindex())]"
					},
					"untrustNicName": {
						"value": "[concat(variables('untrustNicNameRef'),copyindex())]"
					},
					"trustNicName": {
						"value": "[concat(variables('trustNicNameRef'),copyindex())]"
					},
					"vmSize": {
						"value": "[parameters('virtualMachineSize')]"
					},
					"adminUserName": {
						"value": "[parameters('adminUserName')]"
					},
					"adminPassword": {
						"value": "[parameters('adminPassword')]"
					},
					"storageAccountName": {
						"value": "[parameters('storageAccountName')]"
					},
					"osDiskStorageType": {
						"value": "[parameters('osDiskStorageType')]"
					},
					"availabilitySetName": {
						"value": "[parameters('availabilitySetName')]"
					}
				}
			}
		}
	]
}
